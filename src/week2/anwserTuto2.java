/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/Classes/Class.java to edit this template
 */
package week2;

/**
 *
 * @author user
 */
public class anwserTuto2 {
    

    /*
        2.Raw type : a generic class/interface used without specifying a concrete type/without a type parameter
            
            Raw types are considered unsafe because they bypass the type safety checks provided by Java's generics system. 
            When we use a raw type, we lose the ability to catch certain types of errors at compile time, 
            and we may encounter unexpected runtime errors when the code is executed.
    
            The raw type is allowed in Java for backward compatibility with pre-Java 5 code that does not use generics. 
            In other words, raw types are allowed to support legacy code that was written before the 
            introduction of generics in Java 5.
    
        3.The compiler uses the generic type information to compile the code, but erases
        it afterwards. So the generic information is not available at run time
    
        reasons on why generics implemented using erasure:-
            Backward compatibility: As mentioned above, erasure was introduced to maintain backward compatibility with 
            pre-Java 5 code that did not use generics. By erasing the generic type information at runtime, existing code 
            can still be executed without the need for modification.

            Reduced memory footprint: Erasure reduces the amount of memory required by the JVM to execute the code, 
            as the generic type information is removed from the compiled code.

            Simpler bytecode: Erasure simplifies the bytecode generated by the Java compiler, as it eliminates 
            the need to create new bytecode for every different type parameter used.

            Facilitates optimization: Erasure makes it easier for the Java compiler to perform optimizations, 
            as the bytecode is simpler and contains fewer type-related operations.
    
        9. it replaces all occurrences of the type parameter with the type Object. 
            This process is known as type erasure.
    
        10. it replaces all occurrences of the type parameter with the upper bound specified in the type parameter declaration. 
            For example, if a type parameter is declared as <T extends Number>, then all occurrences of T in the class, interface, 
            or method are replaced with Number.
    */
}
